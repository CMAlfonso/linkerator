{"ast":null,"code":"const {\n  Client\n} = require(\"pg\");\n\nconst client = new Client('postgres://localhost:5432/linkerator:dev');\n\nasync function getAllLinks() {\n  try {\n    const {\n      rows: linkIds\n    } = await client.query(`\n        SELECT id, url, \"clickCount\", comment, \"dateShared\"\n        FROM links;\n        `);\n    const links = await Promise.all(linkIds.map(link => getLinkById(link.id)));\n    return links;\n  } catch (error) {\n    console.error(\"Error getting all links!\");\n    throw error;\n  }\n}\n\nasync function createLink({\n  url,\n  comment,\n  dateShared\n}) {\n  try {\n    const {\n      rows: [link]\n    } = await client.query(`\n        INSERT INTO links(url, comment, \"dateShared\")\n        VALUES($1, $2, $3)\n        ON CONFLICT (url) DO NOTHING\n        RETURNING *;\n        `, [url, comment, dateShared]);\n    return link;\n  } catch (error) {\n    console.error(\"Error creating link!\");\n    throw error;\n  }\n}\n\nasync function updateLink(id, fields = {}) {\n  const setString = Object.keys(fields).map((key, index) => `\"${key}\"=$${index + 1}`).join(', ');\n\n  if (setString.length === 0) {\n    return;\n  }\n\n  try {\n    const {\n      rows: [link]\n    } = await client.query(`\n        UPDATE users\n        SET ${setString}\n        WHERE id=${id}\n        RETURNING *;\n        `, Object.values(fields));\n    return link;\n  } catch (error) {\n    console.error(\"Error updating link!\");\n    throw error;\n  }\n}\n\nasync function createTag(tagList) {\n  if (tagList.length === 0) {\n    return;\n  }\n\n  const insertValues = tagList.map((_, index) => `$${index + 1}`).join('), (');\n  const selectValues = tagList.map((_, index) => `$${index + 1}`).join(', ');\n\n  try {\n    await client.query(`\n        INSERT INTO tags(name)\n        VALUES (${insertValues})\n        ON CONFLICT (name) DO NOTHING;\n        `, tagList);\n    const {\n      rows\n    } = await client.query(`\n        SELECT * FROM tags\n        WHERE name\n        IN (${selectValues});\n        `, tagList);\n    return rows;\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function createLinkTag() {\n  try {\n    await client.query(`\n          INSERT INTO link_tags(\"linkId\", \"tagId\")\n          VALUES ($1, $2)\n          ON CONFLICT (\"linkId\", \"tagId\") DO NOTHING;\n        `, [linkId, tagId]);\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function addTagsToLink(linkId, tagList) {\n  try {\n    const createLinkTagPromises = tagList.map(tag => createLinkTag(linkId, tag.id));\n    await Promise.all(createLinkTagPromises);\n    return await getLinkById(linkId);\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function getLinkById(linkId) {\n  try {\n    const {\n      rows: [link]\n    } = await client.query(`\n          SELECT *\n          FROM links\n          WHERE id=$1;\n        `, [linkId]);\n\n    if (!link) {\n      throw {\n        name: \"LinkNotFoundError\",\n        message: \"Could not find a link with that linkId\"\n      };\n    }\n\n    const {\n      rows: tags\n    } = await client.query(`\n          SELECT tags.*\n          FROM tags\n          JOIN link_tags ON tags.id=link_tags.\"tagId\"\n          WHERE link_tags.\"linkId\"=$1;\n        `, [linkId]);\n    link.tags = tags;\n    return link;\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function getLinksByTagName(tagName) {\n  try {\n    const {\n      rows: linkIds\n    } = await client.query(`\n          SELECT links.id\n          FROM links\n          JOIN link_tags ON links.id=link_tags.\"linkId\"\n          JOIN tags ON tags.id=link_tags.\"tagId\"\n          WHERE tags.name=$1;\n        `, [tagName]);\n    return await Promise.all(linkIds.map(link => getLinkById(link.id)));\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function getAllTags() {\n  try {\n    const {\n      rows\n    } = await client.query(`\n        SELECT *\n        FROM tags;\n      `);\n    return rows;\n  } catch (error) {\n    throw error;\n  }\n}\n\nmodule.exports = {\n  client,\n  getAllLinks,\n  createLink,\n  updateLink,\n  createTag,\n  createLinkTag,\n  addTagsToLink,\n  getLinkById,\n  getLinksByTagName,\n  getAllTags\n};","map":{"version":3,"sources":["/Users/xiao127/Code/course_work/project_17/linkerator/src/db/index.js"],"names":["Client","require","client","getAllLinks","rows","linkIds","query","links","Promise","all","map","link","getLinkById","id","error","console","createLink","url","comment","dateShared","updateLink","fields","setString","Object","keys","key","index","join","length","values","createTag","tagList","insertValues","_","selectValues","createLinkTag","linkId","tagId","addTagsToLink","createLinkTagPromises","tag","name","message","tags","getLinksByTagName","tagName","getAllTags","module","exports"],"mappings":"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","sourcesContent":["const {Client} = require(\"pg\");\n\nconst client = new Client('postgres://localhost:5432/linkerator:dev');\n\nasync function getAllLinks() {\n    try {\n        const {rows: linkIds} = await client.query(`\n        SELECT id, url, \"clickCount\", comment, \"dateShared\"\n        FROM links;\n        `);\n\n        const links = await Promise.all(linkIds.map(\n            link => getLinkById(link.id)\n        ));\n\n        return links;\n    } catch (error) {\n        console.error(\"Error getting all links!\");\n        throw error;\n    }\n}\n\nasync function createLink({\n    url,\n    comment,\n    dateShared\n}) {\n    try {\n        const {rows: [link]} = await client.query(`\n        INSERT INTO links(url, comment, \"dateShared\")\n        VALUES($1, $2, $3)\n        ON CONFLICT (url) DO NOTHING\n        RETURNING *;\n        `, [url, comment, dateShared]);\n\n        return link;\n    } catch (error) {\n        console.error(\"Error creating link!\");\n        throw error;\n    }\n}\n\nasync function updateLink(id, fields = {}) {\n    const setString = Object.keys(fields).map(\n        (key, index) => `\"${ key }\"=$${ index + 1 }`\n    ).join(', ');\n\n    if (setString.length === 0) {\n        return;\n    }\n\n    try {\n        const {rows: [link]} = await client.query(`\n        UPDATE users\n        SET ${setString}\n        WHERE id=${id}\n        RETURNING *;\n        `, Object.values(fields));\n\n        return link;\n    } catch (error) {\n        console.error(\"Error updating link!\");\n        throw error;\n    }\n}\n\nasync function createTag(tagList) {\n    if (tagList.length === 0) { \n        return; \n      }\n    \n    const insertValues = tagList.map(\n    (_, index) => `$${index + 1}`).join('), (');\n\n    const selectValues = tagList.map(\n    (_, index) => `$${index + 1}`).join(', ');\n\n    try {\n        await client.query(`\n        INSERT INTO tags(name)\n        VALUES (${insertValues})\n        ON CONFLICT (name) DO NOTHING;\n        `, tagList);\n\n        const {rows} = await client.query(`\n        SELECT * FROM tags\n        WHERE name\n        IN (${selectValues});\n        `, tagList);\n\n        return rows;\n    } catch (error) {\n        throw error\n    }\n}\n\nasync function createLinkTag() {\n    try {\n        await client.query(`\n          INSERT INTO link_tags(\"linkId\", \"tagId\")\n          VALUES ($1, $2)\n          ON CONFLICT (\"linkId\", \"tagId\") DO NOTHING;\n        `, [linkId, tagId]);\n      } catch (error) {\n        throw error;\n      }\n}\n\nasync function addTagsToLink(linkId, tagList) {\n    try {\n        const createLinkTagPromises = tagList.map(\n            tag => createLinkTag(linkId, tag.id)\n          );\n      \n          await Promise.all(createLinkTagPromises);\n      \n          return await getLinkById(linkId);\n    } catch (error) {\n        throw error;\n    }\n}\n\nasync function getLinkById(linkId) {\n    try {\n        const { rows: [ link ]  } = await client.query(`\n          SELECT *\n          FROM links\n          WHERE id=$1;\n        `, [linkId]);\n  \n        if (!link) {\n          throw {\n            name: \"LinkNotFoundError\",\n            message: \"Could not find a link with that linkId\"\n          };\n        }\n    \n        const { rows: tags } = await client.query(`\n          SELECT tags.*\n          FROM tags\n          JOIN link_tags ON tags.id=link_tags.\"tagId\"\n          WHERE link_tags.\"linkId\"=$1;\n        `, [linkId])\n    \n        link.tags = tags;\n    \n        return link;\n      } catch (error) {\n        throw error;\n      }\n}\n\nasync function getLinksByTagName(tagName) {\n    try {\n        const { rows: linkIds } = await client.query(`\n          SELECT links.id\n          FROM links\n          JOIN link_tags ON links.id=link_tags.\"linkId\"\n          JOIN tags ON tags.id=link_tags.\"tagId\"\n          WHERE tags.name=$1;\n        `, [tagName]);\n    \n        return await Promise.all(linkIds.map(\n          link => getLinkById(link.id)\n        ));\n      } catch (error) {\n        throw error;\n      }\n}\n\nasync function getAllTags() {\n    try {\n        const { rows} = await client.query(`\n        SELECT *\n        FROM tags;\n      `);\n  \n      return rows;\n    } catch (error) {\n      throw error;\n    }\n}\n\nmodule.exports = {\n    client,\n    getAllLinks,\n    createLink,\n    updateLink,\n    createTag,\n    createLinkTag,\n    addTagsToLink,\n    getLinkById,\n    getLinksByTagName,\n    getAllTags\n}"]},"metadata":{},"sourceType":"module"}